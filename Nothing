import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;



public class Nothing extends GameObject{
	
	private int [][] arr;
	
	private int level;
	
	private ArrayList<Wall> theWalls;
	
	private int[] wallData;
	
	
	
	public Nothing(int x, int y, ID id)
	{
		super(x, y, id);
		
		//theWalls = new ArrayList<Wall>();
		
		arr = new int [21][21];
		
		
		
	}
	
	public Nothing(int level)
	{
		super(0,0,ID.Static);
		this.level = level;
		//this.clear();
		
		arr = new int [21][21];
		this.level1();
		
		
		
		
	
		theWalls = new ArrayList<Wall>();
	}

	
	public boolean isOutOfBounds()
	{						
		return false;
	}
	
	public void tick()
	{
		
	}

	public ArrayList<Wall> getTheWalls()
	{
		return theWalls;
	}
	
	public Wall getTheWallAt(int x)
	{
		return theWalls.get(x);
	}
	
	public void render(Graphics g)
	{
		
		
		g.setColor(Color.WHITE);
	
		for (int x = 0; x < theWalls.size(); x++)
		{
				
			   if (!theWalls.get(x).isAGoal())
			   {
			    g.fillRect(theWalls.get(x).getX(), theWalls.get(x).getY(), 25, 25);
			   }
		
			   else if (theWalls.get(x).isAGoal())
			   {
				   g.setColor(Color.GREEN);
				   g.fillRect(theWalls.get(x).getX(), theWalls.get(x).getY(), 25, 25);
				   g.setColor(Color.WHITE);
			   }
		
		     
		}
		
	}
	public void clear()
	{
		for(int x = 0; x < wallData.length; x++)
		{
		  wallData[x] = 1;
		}
	}
	
	
	
	private void clearArrayList()
	{
		theWalls.clear();			
	}
	
	public int getTheWallsLength()
	{
		return theWalls.size();
	}
	
	private void fillArray()
	{
		for (int x = 0; x < wallData.length; x++)
		{
			if (wallData[x] != 0 && wallData[x] != 2)
			{
				wallData[x] = 1;
			}
		}
	}
	
	
	private void fillXRow(int start, int end)
	{
		for ( int x = start; x < end; x++)
		{
			wallData[x] = 0;
		}
	}
	
	
	private void generateLevel()
	{
		
		int posX = 0;
		int posY = 0;
		
		this.clearArrayList();
		//this.clear();
		
		for (int x = 0; x < wallData.length; x++)
		{
			if (wallData[x] == 1)
			{								
					posY = (x / 21);
												
					posX = (x % 21);
										
				
				theWalls.add(new Wall(posX * 25 , posY * 25));
			}
		
		    if (wallData[x] == 2)
		    {
		    	posY = (x / 21);
				
				posX = (x % 21);
				
				theWalls.add(new Goal(posX * 25, posY * 25));
		    }
		
		}
		
		
		
	}
	
	
	
	
	
	
	public void level1()
	{
		wallData = new int[440];
		this.clear();
		
		
		wallData[1] = 0;
		wallData[22] = 0;
		wallData[43] = 0;
		wallData[44] = 0;
		wallData[45] = 0;
		wallData[46] = 2;
		
		
		
		theWalls = new ArrayList<Wall>();
		this.generateLevel();	
	}
	public void level2()
	{
		wallData = new int[440];
		this.clear();
		
		wallData[153] = 2;
		wallData[1] = 0;
		wallData[2] = 0;
		wallData[3] = 0;
		wallData[4] = 0;
		wallData[25] = 0;
		wallData[46] = 0;
		wallData[22] = 0;
		wallData[43] = 0;
		wallData[64] = 0;
		wallData[85] = 0;
		//for(int i = 106; i < 116; i++)
			//wallData[i] = 0;
		
		this.fillXRow(106, 116);
		
		wallData[90] = 0;
		wallData[69] = 0;
		wallData[48] = 0;
		wallData[7] = 0;
		wallData[8] = 0;
		wallData[9] = 0;
		wallData[50] = 0;
		wallData[51] = 0;
		for(int i = 10; i < 220; i+=21)
			wallData[i] = 0;
		for(int i = 193; i < 200; i++)
			wallData[i] = 0;
		wallData[155] = 0;
		wallData[176] = 0;
		wallData[172] = 0;
		wallData[151] = 0;
		wallData[152] = 0;
		
		
		
		theWalls = new ArrayList<Wall>();
		this.generateLevel();		
	}
	public void level3()
	{
		wallData = new int[440];
		this.clear();
		
		wallData[218] = 2;
		wallData[1] = 0;	
		for(int i = 1; i < 421; i+=21)
			wallData[i] = 0;
		for(int i = 1; i < 20; i++)
			wallData[i] = 0;
		for(int i = 19; i < 145; i+=21)
			wallData[i] = 0;
		for(int i = 108; i < 125; i++)
			wallData[i] = 0;
		for(int i = 400; i < 419; i++)
			wallData[i] = 0;
		for(int i = 334; i < 439; i+=21)
			wallData[i] = 0;
		for(int i = 108; i < 192; i+=21)
			wallData[i] = 0;
		wallData[172] = 0;
		wallData[173] = 0;
		wallData[152] = 0;
		wallData[153] = 0;
		wallData[154] = 0;
		wallData[175] = 0;
		wallData[176] = 0;
		wallData[177] = 0;
		wallData[156] = 0;
		wallData[157] = 0;
		wallData[158] = 0;
		wallData[179] = 0;
		wallData[180] = 0;
		wallData[181] = 0;
		wallData[160] = 0;
		wallData[161] = 0;
		wallData[162] = 0;
		wallData[183] = 0;
		wallData[184] = 0;
		wallData[185] = 0;
		wallData[164] = 0;
		wallData[165] = 0;
		for(int i = 166; i < 250; i+=21)
			wallData[i] = 0;
		for(int i = 223; i < 229; i++)
			wallData[i] = 0;
		for(int i = 223; i < 307; i+=21)
			wallData[i] = 0;
		for(int i = 282; i < 287; i++)
			wallData[i] = 0;
		wallData[261] = 0;
		wallData[240] = 0;
		wallData[217] = 0;
		wallData[238] = 0;
		for(int i = 255; i < 260; i++)
			wallData[i] = 0;
		wallData[276] = 0;
		wallData[297] = 0;
		wallData[318] = 0;
		wallData[339] = 0;
		wallData[360] = 0;
		wallData[361] = 0;
		wallData[362] = 0;
		wallData[341] = 0;
		wallData[320] = 0;
		wallData[299] = 0;
		wallData[300] = 0;
		wallData[301] = 0;
		wallData[322] = 0;
		wallData[343] = 0;
		wallData[364] = 0;
		wallData[365] = 0;
		wallData[366] = 0;
		wallData[345] = 0;
		wallData[324] = 0;
		wallData[325] = 0;
		wallData[326] = 0;
		wallData[347] = 0;
		wallData[368] = 0;
		wallData[369] = 0;
		wallData[370] = 0;
		wallData[349] = 0;
		wallData[328] = 0;
		wallData[329] = 0;
		wallData[330] = 0;
		wallData[351] = 0;
		wallData[372] = 0;
		wallData[373] = 0;
		wallData[374] = 0;
		wallData[353] = 0;
		wallData[332] = 0;
		wallData[333] = 0;
		
		
		theWalls = new ArrayList<Wall>();
		this.generateLevel();	
	}
}
