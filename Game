import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

//this method will hold all aspects of the game


public class Game extends Canvas  implements Runnable, ImageObserver
{
	private static final long serialVersionUID = -1836269745511707098L;

	final int WIDTH = 700, HEIGHT = 525;
	private Thread thread;
	Handler handler;
	//public int frames;
	public Integer frames;
	
	private Nothing start;
	
	private boolean running = false;
	private BufferedImage image;
	
	private boolean collision = false;
	
	Player user;
	
	public Game() 
	{	//add anything new to this method
		
		handler = new Handler();
		this.addKeyListener(new KeyInput(handler));
		
		Window window = new Window(WIDTH, HEIGHT, "Impossible Game", this);
		
		
		
		user = new Player(32, 0, ID.Dynamic);
		Path path1 = new Path(90, 0, ID.Path);
		Path path2 = new Path(90, 160, 400, 25);
		
		start = new Nothing(1);
		//be sure to add paths before adding user
		//handler.add(path1);
		//handler.add(path2);
		
		handler.add(start);
		start.level1();
		
		
		
		handler.add(user);
	
			    	
	
	}
	
	//image gen - WiP
	
	
	
	
	
	public synchronized void start()
	{
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop()
	{
		try {
			thread.join();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	//DO NOT TOUCH!!!
	public void run()
	{
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		frames = 0;
		while(running)
		{
			long now = System.nanoTime();
			delta += (now - lastTime)/ns;
			lastTime = now;
			while(delta >= 1)
			{
				tick();
				delta --;			
			}
			if(running)
				render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000)
			{
				timer += 1000;
				System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop();
	}
	
	public void tick()
	{
		handler.tick();
		
		//if (user.getPlayerRekt().intersects())
	
	   for (int x = 0; x < 2; x++)
	   {
		  if (this.start.getTheWallAt(x) != null)
		  {
		   
		    if(user.getPlayerRekt().intersects(start.getTheWallAt(x).getRekt()))
		     {     
		      this.collision = true;
		     }
		  }
		  
	    if (collision)
	    {
	    	user.addDeath();
	    	user.resetPlayer();
	    	
	    }
	   
	    collision = false;
	   }
	   
	   
	
	}
	
	
	
	public void render()
	{
		//BufferedImage bs = new BufferedImage(1,1,1);
		
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null)
		{
			this.createBufferStrategy(3);
			return;
		}
		
		//Graphics g = bs.getGraphics();
		
		Graphics g = bs.getDrawGraphics();
		
		g.setColor(Color.WHITE);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		handler.render(g);
		
		g.setColor(Color.BLUE);
		g.fillRect(540, 0, 180 , HEIGHT);
		g.setColor(Color.WHITE);
		g.drawString("The Game", 600, 50);
		g.setColor(Color.WHITE);
		// add frames/sec here
		g.drawString("FPS:", 600, 80);
		g.drawString(frames.toString(), 630, 80);
		
		g.dispose();
		//g.drawImage(bs, 0, 0, WIDTH, HEIGHT, Color.WHITE, null);
		bs.show();
	}
	
	public static void main(String args[])
	{
		new Game();
	}
	
	
	
	
	
	
	public static int clamp(int var, int max, int min)
	{
		if(var >= max) return var = max;
		else if(var <= min) return var = min;
		else return var;
	}
}
